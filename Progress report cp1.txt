Progress Report
* Responsibilities
   * (some tasks overlapped)
   * Jincheng Liu: control_rom, connecting IF/ID_stage module, arbiter and forwarding design.
   * Daniel Marks: Pipeline registers, connecting components in datapath, setting up testbench, debugging
   * Shenjiang Liu: Brought in previous module, help with debugging, they wrote everything so fast, so I just help with them to review little mistakes in the code.


* Functionality
   * Basic CPU with 5 pipelined stages, no protection against data and control hazards


* Test strategy
   * Test bench using source program mp4_cp1.s
   * Loading the memory.lst and tracing the program execution in Modelsim
      * Tracked PC as instructions were executed to validate the functionality of each operation
      * Verified register values at the end of the program
      * Checked the final PC register value during halt loop




Road map
* Work assignment
   * (some tasks overlapped)
   * Jincheng Liu: arbiter, forwarding unit
   * Shenjiang Liu: Icache Dcache, maybe the arbiter with Jincheng
   * Danie Marks: Data hazard protection, branch prediction


* Feature and functionality
   * Protection against data/control hazards
      * Dependency calculation
      * Pipeline stalling
   * Pipeline optimizations
      * Forwarding
      * Transparent Regfile
      * Specialized instruction and data caching system
      * Branch translation buffer (BTB)
      * Case where writeback data need to connect to decode stage
   * Icache Dcache design
      * Single state possible?