/*TODO*/
import rv32i_types::*;
module control_rom(
    input clk,
    input rst,
    input logic [5:0] rd,
    input rv32i_opcode opcode,
    input logic [2:0] funct3,
    input logic [6:0] funct7,
    input logic [31:] PC,
    output rv32i_control_word word

);

logic [3:0] mem_byte_enable;
logic mem_read;
logic mem_write;
regfilemux::regfilemux_sel_t regfilemux_sel;
pcmux::pcmux_sel_t pcmux_sel;
alumux::alumux1_sel_t alumux1_sel;
alumux::alumux2_sel_t alumux2_sel;
//marmux::marmux_sel_t marmux_sel;
cmpmux::cmpmux_sel_t cmpmux_sel;
logic load_regfile;
logic load_mar;
logic load_mdr;
alu_ops aluop;
branch_funct3_t cmpop;
logic load_data_out;
assign word.opcode = opcode;
assign word.load_regfile = load_regfile;
assign word.load_mar = load_mar;
assign word.load_mdr = load_mdr;
assign word.load_data_out = load_data_out;
assign word.regfilemux_sel = regfilemux_sel;
assign word.pcmux_sel = pcmux_sel;
assign word.alumux1_sel = alumux1_sel;
assign word.alumux2_sel = alumux2_sel;
assign word.marmux_sel = marmux_sel;
assign word.cmpmux_sel = cmpmux_sel;
assign word.mem_read = mem_read;
assign word.mem_write = mem_write;
assign word.mem_byte_enable = mem_byte_enable;
assign word.rd = rd;
assign word.funct3 = funct3;
assign word.pc = pc;
assign word.funct7 = funct7;
/*
rv32i_opcode opcode;
    alu_ops aluop;
    
    logic load_regfile;
    logic load_mar;
    logic load_mdr;
	logic load_data_out;

    regfilemux::regfilemux_sel_t regfilemux_sel;
    pcmux::pcmux_sel_t pcmux_sel;
    alumux::alumux1_sel_t alumux1_sel;
    alumux::alumux2_sel_t alumux2_sel;
    marmux::marmux_sel_t marmux_sel;
    cmpmux::cmpmux_sel_t cmpmux_sel;

    logic mem_read;
	logic mem_write;
    logic [3:0] mem_byte_enable;
    logic [1:0] mem_addr_bits;

    logic [5:0] rd;
    logic [2:0] funct3;
    logic [6:0] funct7;

    logic [31:0] pc;
*/
always_comb
begin : word_generator
    mem_byte_enable = 4'b1111;
    mem_read = 1'b0;
	mem_write = 1'b0;
    regfilemux_sel = regfilemux::alu_out;
    pcmux_sel = pcmux::pc_plus4;
    alumux1_sel = alumux::rs1_out;
    alumux2_sel = alumux::i_imm;
    //marmux_sel = marmux::pc_out;
    cmpmux_sel = cmpmux::rs2_out;
    aluop = alu_ops'(funct3);
    cmpop = branch_funct3_t'(funct3);
    load_regfile = 1'b0;
    load_mar = 1'b0;
	load_mdr = 1'b0;
    load_data_out = 1'b0;

    case (opcode)
        op_br: begin
            pcmux_sel = pcmux::pcmux_sel_t'(br_en);
            alumux1_sel = alumux::pc_out;
            alumux2_sel = alumux::b_imm;
            aluop = alu_add;
        end
        op_load: begin
            aluop = alu_add;
            load_mar = 1;
            //marmux_sel = marmux::alu_out;
            case (load_funct3_t'(funct3))
                lw: begin
                    regfilemux_sel = regfilemux::lw;
                end
                lh :begin
                    regfilemux_sel = regfilemux::lh;
                end
                lhu: begin
                    regfilemux_sel = regfilemux::lhu;
                end 
                lbu: begin
                    regfilemux_sel = regfilemux::lbu;
                end
                lb:begin
                    regfilemux_sel = regfilemux::lb;
                end
                default: ;
            endcase
        end

        op_store: begin
            alumux2_sel = alumux::s_imm;
            aluop = alu_add;
            load_mar = 1;
            load_data_out = 1;
            /*case(store_funct3_t'(funct3))
                sw: mem_byte_enable = 4'b1111;
                sh: mem_byte_enable = 4'b0011;
                sb: mem_byte_enable = 4'b0001;
            endcase*/
            //marmux_sel = marmux::alu_out;
        end
        
        op_imm: begin
            if (funct3 == slt) begin
                load_regfile = 1'b1;
                cmpop = blt;
                regfilemux_sel = regfilemux::br_en;
                cmpmux_sel = cmpmux::i_imm;
            end else if (funct3 == sltu) begin
                load_regfile = 1'b1;
                cmpop = bltu;
                regfilemux_sel = regfilemux::br_en;
                cmpmux_sel = cmpmux::i_imm;
            end else if (funct3 == 3'b101 && funct7 == 7'b0100000) begin // srai
                load_regfile = 1;
                aluop = alu_sra;
            end else begin
                load_regfile = 1;
                aluop = alu_ops' (funct3);
            end
        end
        op_lui: begin
            load_regfile = 1;
            regfilemux_sel = regfilemux::u_imm;
        end
        op_reg: begin
            if (funct3 == 3'b000 && funct7 == 7'b0100000) begin
                load_regfile = 1'b1;
                alumux2_sel = alumux::rs2_out;
                aluop = alu_sub;
            end else if (funct3 == 3'b101 && funct7 == 7'b0100000) begin
                load_regfile = 1'b1;
                alumux2_sel = alumux::rs2_out;
                aluop = alu_sra;
            end else begin
                load_regfile = 1;
				alumux2_sel = alumux::rs2_out;
                aluop = alu_ops' (funct3);
            end
        end
        op_auipc: begin
            
        end
        op_jal: begin
            pcmux_sel = pcmux::alu_mod2;
            load_regfile = 1'b1;
            alumux1_sel = alumux::pc_out;
            alumux2_sel = alumux::j_imm;
			regfilemux_sel = regfilemux::pc_plus4;
            aluop = alu_add;
        end
        op_jalr:begin
            pcmux_sel = pcmux::alu_mod2;
            load_regfile = 1'b1;
            alumux1_sel = alumux::rs1_out;
            alumux2_sel = alumux::i_imm;
			regfilemux_sel = regfilemux::pc_plus4;
            aluop = alu_add;
        end
        default: /*doom*/;
    endcase
end

endmodule : control_rom